import com.android.build.gradle.api.TestVariant

//useful debug stuff
//project.configurations.compile.getProperties().each { println it }
//println android.sourceSets.main.java.srcDirs

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
        classpath 'com.novoda.gradle:robolectric-plugin:0.0.1-SNAPSHOT'
    }
}

configure(allprojects) {
    group = 'com.octo.android'

    ext.androidVersion           = "4.1.1.4"
    ext.androidSDKVersion        = "17"
    ext.androidBuildToolsVersion = "17.0"
    ext.androidSupportVersion    = "18.0.0"
    ext.jodaLibraryVersion       = "2.2"
    ext.robotiumVersion          = "4.0"
    ext.hamcrestVersion          = "1.3"
    ext.spoonVersion             = "1.0.1"
    ext.festVersion              = "1.0.3"
    ext.dexmakerVersion          = "1.0"
    ext.dexmakerMockitoVersion   = "1.0"
    ext.easyMockVersion          = "3.2"
    ext.mockitoVersion           = "1.9.5"
    ext.boundBoxVersion          = "1.2.0"
}

configure(subprojects) { subproject ->
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

//-------------------------
//-- Android Sample Project
//-------------------------

project('android-sample') {
    description = "Android sample app under tests"

    apply plugin: 'android'
    apply plugin: 'eclipse'
    apply plugin: "sonar-runner"
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'

    dependencies {
        compile "joda-time:joda-time:$jodaLibraryVersion"
//        compile "com.android.support:support-v4:$androidSupportVersion"
        compile fileTree(dir: 'libs', include: '*.jar')

        instrumentTestCompile "com.jayway.android.robotium:robotium-solo:$robotiumVersion"
        instrumentTestCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
        instrumentTestCompile "com.squareup.spoon:spoon-client:$spoonVersion"
        instrumentTestCompile "com.squareup:fest-android:$festVersion"
    }


    android {
        buildToolsVersion "$androidBuildToolsVersion"
        compileSdkVersion 17

        sourceSets {
            main {
                manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src/main/java']
                resources.srcDirs = ['src']
                aidl.srcDirs = ['src']
                renderscript.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = ['assets']
            }

            instrumentTest.setRoot('../android-sample-tests')
            instrumentTest {
                java { srcDirs = [
                        '../android-sample-tests/src/main/java'
                    ] }
                res.srcDirs = ['res']
                assets.srcDirs = [
                    '../android-sample-tests/assets'
                ]
                resources.srcDirs = [
                    '../android-sample-tests/src'
                ]
            }
        }

        defaultConfig {
            testPackageName "com.octo.android.sample.test"
            testInstrumentationRunner "android.test.InstrumentationTestRunner"
        }

        afterEvaluate { project ->
            project.android.applicationVariants.each { variant ->
                if( variant.install != null ) {
                    variant.install.doLast {
                        def result = exec {
                            executable = 'adb'
                            args = [
                                'shell',
                                'am',
                                'start',
                                '-c',
                                'android.intent.category.LAUNCHER',
                                '-n',
                                'com.octo.android.sample/.ui.HelloAndroidActivity'
                            ]
                        }
                    }
                }
            }
        }
    }

    task checkstyle(type: Checkstyle) {
        configFile file('../config/quality/checkstyle/checkstyle.xml')
        source 'src/main/java'
        include '**/*.java'
        exclude '**/gen/**'

        classpath = files( project.configurations.compile.asPath )
    }

    task findbugs(type: FindBugs) {
        excludeFilter file('../config/quality/findbugs/findbugs-filter.xml')
        classes = fileTree('build/classes/debug/')
        source = fileTree('src/main/java/')
        classpath = files( project.configurations.compile.asPath )
        effort = 'max'
    }

    task pmd(type: Pmd) {
        ruleSetFiles = files('../config/quality/pmd/pmd-ruleset.xml')
        ruleSets = ["basic", "braces", "strings"]
        source = fileTree(android.sourceSets.main.java.srcDirs)
    }


    sonarRunner {
        sonarProperties {
            property "sonar.host.url", "http://localhost:9000"
            property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true"
            property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
            property "sonar.jdbc.username", "sonar"
            property "sonar.jdbc.password", "pwd"
            property "sonar.branch", "gradle"
            property "sonar.dynamicAnalysis", "reuseReports"
            properties["sonar.sources"] = android.sourceSets.main.java.srcDirs
            properties["sonar.tests"] = android.sourceSets.instrumentTest.java.srcDirs
            properties["sonar.binaries"] = file("build/classes/debug")
            property "sonar.surefire.reportsPath","build/instrumentTest-results/connected/"
        }
    }

}

//-------------------------
//-- Root project
//-------------------------

configure(rootProject) { description = 'Quality Analysis Tools 4 Android' }

apply plugin: 'build-dashboard'
